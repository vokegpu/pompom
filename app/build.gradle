plugins {
    id 'com.android.application'
}

def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY')
def buildAsApplication = !buildAsLibrary

if (buildAsApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    compileSdk 32

    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.libsdl.app"
        }

        minSdk 22
        targetSdk 32
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_APP_PLATFORM=android-23", "-DANDROID_STL=c++_shared"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }

        externalNativeBuild {
            cmake {
                path "jni/CMakeLists.txt"
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    if (buildAsLibrary) {
        libraryVariants.all {
            variant -> variant.outputs.each {
                output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith(".aar")) {
                        def fileName = "org.libsdl.app.aar"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}